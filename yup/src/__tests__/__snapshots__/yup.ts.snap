// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`yupResolver should return a single error from yupResolver when validation fails 1`] = `
Object {
  "errors": Object {
    "birthYear": Object {
      "message": "birthYear must be a \`number\` type, but the final value was: \`NaN\` (cast from the value \`\\"birthYear\\"\`).",
      "type": "typeError",
    },
    "password": Object {
      "message": "password must match the following: \\"/^[a-zA-Z0-9]{3,30}/\\"",
      "type": "matches",
    },
    "username": Object {
      "message": "username is a required field",
      "type": "required",
    },
  },
  "values": Object {},
}
`;

exports[`yupResolver should return a single error from yupResolver with \`mode: sync\` when validation fails 1`] = `
Object {
  "errors": Object {
    "birthYear": Object {
      "message": "birthYear must be a \`number\` type, but the final value was: \`NaN\` (cast from the value \`\\"birthYear\\"\`).",
      "type": "typeError",
    },
    "password": Object {
      "message": "password must match the following: \\"/^[a-zA-Z0-9]{3,30}/\\"",
      "type": "matches",
    },
    "username": Object {
      "message": "username is a required field",
      "type": "required",
    },
  },
  "values": Object {},
}
`;

exports[`yupResolver should return all the errors from yupResolver when validation fails with \`validateAllFieldCriteria\` set to true 1`] = `
Object {
  "errors": Object {
    "birthYear": Object {
      "message": "birthYear must be a \`number\` type, but the final value was: \`NaN\` (cast from the value \`\\"birthYear\\"\`).",
      "type": "typeError",
      "types": Object {
        "typeError": "birthYear must be a \`number\` type, but the final value was: \`NaN\` (cast from the value \`\\"birthYear\\"\`).",
      },
    },
    "password": Object {
      "message": "password must match the following: \\"/^[a-zA-Z0-9]{3,30}/\\"",
      "type": "matches",
      "types": Object {
        "matches": "password must match the following: \\"/^[a-zA-Z0-9]{3,30}/\\"",
      },
    },
    "username": Object {
      "message": "username is a required field",
      "type": "required",
      "types": Object {
        "required": "username is a required field",
      },
    },
  },
  "values": Object {},
}
`;

exports[`yupResolver should return all the errors from yupResolver when validation fails with \`validateAllFieldCriteria\` set to true and \`mode: sync\` 1`] = `
Object {
  "errors": Object {
    "birthYear": Object {
      "message": "birthYear must be a \`number\` type, but the final value was: \`NaN\` (cast from the value \`\\"birthYear\\"\`).",
      "type": "typeError",
      "types": Object {
        "typeError": "birthYear must be a \`number\` type, but the final value was: \`NaN\` (cast from the value \`\\"birthYear\\"\`).",
      },
    },
    "password": Object {
      "message": "password must match the following: \\"/^[a-zA-Z0-9]{3,30}/\\"",
      "type": "matches",
      "types": Object {
        "matches": "password must match the following: \\"/^[a-zA-Z0-9]{3,30}/\\"",
      },
    },
    "username": Object {
      "message": "username is a required field",
      "type": "required",
      "types": Object {
        "required": "username is a required field",
      },
    },
  },
  "values": Object {},
}
`;

exports[`yupResolver should return an error from yupResolver when validation fails and pass down the yup context 1`] = `
Object {
  "errors": Object {
    "name": Object {
      "message": "name must be at least 6 characters",
      "type": "min",
    },
  },
  "values": Object {},
}
`;

exports[`yupResolver should return an error result if inner yup validation error has no path 1`] = `
Object {
  "errors": Object {
    "required": Object {
      "message": "error1",
      "type": "required",
    },
  },
  "values": Object {},
}
`;

exports[`yupResolver should return correct error message with using yup.test 1`] = `
Object {
  "errors": Object {
    "name": Object {
      "message": "Email or name are required",
      "type": "name",
    },
  },
  "values": Object {},
}
`;
